
@include "../stdlib/io.vlang"

func bool chop_by_char(byte st[], byte delim, byte nth_seen) {
    int length = strlen(st);
    for(int i = 0; i < length; i += 1) {
        if(st[i] == delim) {
            nth_seen = nth_seen - 1;
            if(nth_seen == 0) {
                st[i] = 0;
                return true;
            }
            
        }
    }
    return false;
}

func int close(int fd) {
    int result = syscall 6 fd;
    return result;
}

func short htons(short port) {
    asm {
        "xor rax, rax"
        "mov rbx, rdi"
        "mov al, bh"
        "mov ah, bl"
    }
}

// create a socket
func int socket(int arg1, int arg2, int arg3) {
    int result = syscall 41 arg1, arg2, arg3;
    return result;
}

func int bind(int fd, int ptr, int size) {
    int result = syscall 49 fd, ptr, size;
    return result;
}

func int listen(int fd, int backlog) {
    int result = syscall 50 fd, backlog;
    return result;
}

func int accept(int fd, int ptr, int size) {
    int result = syscall 43 fd, ptr, size;
    return result;
}

func int exit(int status) {
    return syscall 60 status;
}

// reads data from fd
func int read_sock(int fd, int ptr, int size) {
    int result = syscall 0 fd, ptr, size;
    return result;
}

func int send_to_client(int fd, str content) {
    int length = strlen(content);
    int result = syscall 1 fd, content, length;
    return result;
}


// server data
short AF_INET = 2;
short PORT = htons(8000);
int INADDR_ANY = 0;
int SOCK_STREAM = 1;

int length = 16;
int newsock;


int sersock = socket(AF_INET, SOCK_STREAM, 0);
printstr("fd is: ");
print sersock;

if(bind(sersock, &AF_INET, 16) < 0) {
    println("bind error");
    exit(1);
} 

if(listen(sersock, 1) < 0) {
    println("listen error");
    exit(1);
}

printstr("Listening on port: ");
printint(htons(PORT));
println("");

if((newsock = accept(sersock, &AF_INET, &length)) < 0) {
    println("accept error");
    exit(1);
} else {
    println("accepted");
}
    
byte buffer[1024];
int result = read_sock(newsock, buffer, 1024);
chop_by_char(buffer, ' ', 2);
println(buffer);
// send web response
send_to_client(newsock, "HTTP/1.1 200 OK\r\n");
send_to_client(newsock, "Server: Go-http-server\r\n");
send_to_client(newsock, "Content-Length: 88\r\n");
send_to_client(newsock, "Content-Type: text/html\r\n");
send_to_client(newsock, "Connection: Closed\r\n");
send_to_client(newsock, "\r\n");
send_to_client(newsock, "<h1>Hello World!</h1>\r\n");

close(sersock);