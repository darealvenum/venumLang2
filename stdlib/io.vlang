@include "stdlib/string.vlang";
@include "stdlib/libsyscall.vlang";


func long printstr(str string) {
    int length = strlen(string);
    long ret = _syscall(SYS_WRITE, STDOUT, string, length);
    return ret;
}

func long println(str string) {    
    long ret = printstr(string);

    if( ret == strlen(string) ) {
        ret += _syscall(SYS_WRITE, STDOUT, "\n", 1);
    }

    return ret;
}

func int printint(long number) {
    str buffer = "123456789012345678901";

    asm {
        "mov   rdi, $number"
        "mov   rsi, $buffer"
        "xor   rcx, rcx"
        "mov   rax, rdi"
        "test  rax, rax"
        "jns   .L1"
        "mov   BYTE [rsi], '-' ; Add sign"
        "neg   rax"
        "mov   rdi, rax"
        "add   rsi, 1"
      ".L1:    ; get length of number in characters"
        "mov   rbx, 10"
      ".L1A:"
        "add   rcx, 1"
        "cqo       ; convert quad to oct (rax to rdx:rax)"
        "div   rbx"
        "test  rax, rax"
        "jnz   .L1A"
        "mov   rax, rdi"
        "mov   BYTE [rsi+rcx], 0"
      ".L2:"
        "cqo"
        "div   rbx"
        "add   dl, '0'"
        "sub   rcx, 1"
        "mov   BYTE [rsi+rcx], dl"
        "test  rcx, rcx"
        "jnz   .L2"
    }

    printstr(buffer);
    return 0;
}

func void _clear_input(long fd) {
    byte buf[1] = { 0 };
    while( buf[0] != 10 ) { _syscall(SYS_READ, fd, buf, 1); }
}

func long read(long fd, str buffer, long count) {
    _syscall(SYS_READ, fd, buffer, count);
}